#!/usr/bin/env python

import rospy # ROS library

from turtlebot2i_safety.msg import SceneGraphSingle


import warnings
warnings.filterwarnings("ignore")  #a lot of warning messages, but why?

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
def init():

    # New Antecedent/Consequent objects hold universe variables and membership functions
    object_distance = ctrl.Antecedent(np.arange(0, 3, 1), 'distance')     # 0- 3  meter
    object_direction  = ctrl.Antecedent(np.arange(0, 360, 1), 'direction') # 0-360 degree
    object_speed = ctrl.Antecedent(np.arange(0, 2, 1), 'speed')		#0- 2 m/s
    object_orientation = ctrl.Antecedent(np.arange(0, 360, 1), 'orientation')#0-360 degree

    risk = ctrl.Consequent(np.arange(0, 3, 1), 'risk')

    # Auto-membership function population is possible with .automf(3, 5, or 7) #poor,average,good
    object_distance.automf(3)   	# near, midium, far   
    object_direction.automf(3)	# left behind right 	#will be changed to custom MF
    object_speed.automf(3)		#slow medium fast
    object_orientation.automf(3)	# left behind right 	#will be changed to custom MF

    risk.automf(5) 
    object_distance.automf(7)   
  
    #Add Fuzzy rules
    #-----------
    #Rulls here are manually defined, but later it will be generated by MATLAB
    rule1 = ctrl.Rule(object_distance['poor'] | object_speed['good']| object_orientation['average'], risk['good'])
    rule2 = ctrl.Rule(object_direction['average'], risk['average'])
    rule3 = ctrl.Rule(object_distance['good'] | object_direction['good'] |object_direction['poor'], risk['poor'])
    '''
    object_distance.automf(7) 
    rule1 = ctrl.Rule(object_distance['poor'] | object_speed['good']| object_orientation['average'], risk['good'])
    rule2 = ctrl.Rule(object_direction['average'], risk['average'])
    rule3 = ctrl.Rule(object_distance['good'] | object_direction['good'] |object_direction['poor'], risk['poor'])
    '''
    #Control System Creation and Simulation
    #---------------------------------------
    #Now that we have our rules defined, we can simply create a control system

    global risk_assessment_system
    risk_assessment_system = ctrl.ControlSystem([rule1, rule2, rule3]) # this is a FL system




def topic_callback(data):
    
    #In order to simulate this control system, we will create a instance (Call it Agent?)
    risk_assessment_instance = ctrl.ControlSystemSimulation(risk_assessment_system)  # this is a FLS instance

    risk_assessment_instance.input['distance'] = data.object_distance		# 0- 3  meter
    risk_assessment_instance.input['direction'] = data.object_direction		# 0-360 degree
    risk_assessment_instance.input['speed'] =   data.object_speed			#0- 2 m/s
    risk_assessment_instance.input['orientation'] = data.object_orientation		#0-360 degree
    
    risk_assessment_instance.compute()
    rospy.loginfo("The risk is %f at %s",risk_assessment_instance.output['risk'],data.header.stamp)
    #print risk_assessment_instance.output['risk'] #This line can not bu run with Python3


""" Main program """
if __name__ == "__main__":  
    #-- RISK ASSESSMENT FLS INITIALIZATION-----------------------------------
    init()
    print("Initializing Risk Assessment FLS") 
    
    #-- ROS RA NODE INITIALIZATION-----------------------------------    
    print("Initializing ROS RISK ASSESSMENT node")
    rospy.init_node("ra_ros_node",anonymous=True) #Always first

    ## SUBSCRIBERS
    # Creates a subscriber object for each topic

    rospy.Subscriber('/turtlebot2i_safety/SceneGraph', SceneGraphSingle, topic_callback)
    rospy.spin()

