// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package eu.scott.warehouse.domains.twins;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import eu.scott.warehouse.domains.twins.TwinsDomainConstants;


import eu.scott.warehouse.domains.RdfsDomainConstants;
import eu.scott.warehouse.domains.twins.TwinsDomainConstants;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(TwinsDomainConstants.REGISTRATIONMESSAGE_NAMESPACE)
@OslcName(TwinsDomainConstants.REGISTRATIONMESSAGE_LOCALNAME)
@OslcResourceShape(title = "RegistrationMessage Resource Shape", describes = TwinsDomainConstants.REGISTRATIONMESSAGE_TYPE)
public class RegistrationMessage
    extends AbstractResource
    implements IRegistrationMessage
{
    // Start of user code attributeAnnotation:deregister
    // End of user code
    private Boolean deregister;
    // Start of user code attributeAnnotation:trsUri
    // End of user code
    private URI trsUri;
    // Start of user code attributeAnnotation:trsMqttTopic
    // End of user code
    private String trsMqttTopic;
    // Start of user code attributeAnnotation:label
    // End of user code
    private String label;
    // Start of user code attributeAnnotation:serviceProvider
    // End of user code
    private Link serviceProvider = new Link();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public RegistrationMessage()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public RegistrationMessage(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        TwinsDomainConstants.REGISTRATIONMESSAGE_PATH,
        RegistrationMessage.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local RegistrationMessage Resource} - update RegistrationMessage.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    @Deprecated
    public String toHtml()
    {
        return toHtml(false);
    }
    
    @Deprecated
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    
    // Start of user code getterAnnotation:deregister
    // End of user code
    @OslcName("deregister")
    @OslcPropertyDefinition(TwinsDomainConstants.TWINS_DOMAIN_NAMSPACE + "deregister")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Boolean)
    @OslcReadOnly(false)
    public Boolean isDeregister()
    {
        // Start of user code getterInit:deregister
        // End of user code
        return deregister;
    }
    
    // Start of user code getterAnnotation:trsUri
    // End of user code
    @OslcName("trsUri")
    @OslcPropertyDefinition(TwinsDomainConstants.TWINS_DOMAIN_NAMSPACE + "trsUri")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcReadOnly(false)
    public URI getTrsUri()
    {
        // Start of user code getterInit:trsUri
        // End of user code
        return trsUri;
    }
    
    // Start of user code getterAnnotation:trsMqttTopic
    // End of user code
    @OslcName("trsMqttTopic")
    @OslcPropertyDefinition(TwinsDomainConstants.TWINS_DOMAIN_NAMSPACE + "trsMqttTopic")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getTrsMqttTopic()
    {
        // Start of user code getterInit:trsMqttTopic
        // End of user code
        return trsMqttTopic;
    }
    
    // Start of user code getterAnnotation:label
    // End of user code
    @OslcName("label")
    @OslcPropertyDefinition(RdfsDomainConstants.RDFS_NAMSPACE + "label")
    @OslcDescription("Parameter name.")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getLabel()
    {
        // Start of user code getterInit:label
        // End of user code
        return label;
    }
    
    // Start of user code getterAnnotation:serviceProvider
    // End of user code
    @OslcName("serviceProvider")
    @OslcPropertyDefinition(TwinsDomainConstants.TWINS_DOMAIN_NAMSPACE + "serviceProvider")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRepresentation(Representation.Reference)
    @OslcReadOnly(true)
    public Link getServiceProvider()
    {
        // Start of user code getterInit:serviceProvider
        // End of user code
        return serviceProvider;
    }
    
    
    // Start of user code setterAnnotation:deregister
    // End of user code
    public void setDeregister(final Boolean deregister )
    {
        // Start of user code setterInit:deregister
        // End of user code
        this.deregister = deregister;
    
        // Start of user code setterFinalize:deregister
        // End of user code
    }
    
    // Start of user code setterAnnotation:trsUri
    // End of user code
    public void setTrsUri(final URI trsUri )
    {
        // Start of user code setterInit:trsUri
        // End of user code
        this.trsUri = trsUri;
    
        // Start of user code setterFinalize:trsUri
        // End of user code
    }
    
    // Start of user code setterAnnotation:trsMqttTopic
    // End of user code
    public void setTrsMqttTopic(final String trsMqttTopic )
    {
        // Start of user code setterInit:trsMqttTopic
        // End of user code
        this.trsMqttTopic = trsMqttTopic;
    
        // Start of user code setterFinalize:trsMqttTopic
        // End of user code
    }
    
    // Start of user code setterAnnotation:label
    // End of user code
    public void setLabel(final String label )
    {
        // Start of user code setterInit:label
        // End of user code
        this.label = label;
    
        // Start of user code setterFinalize:label
        // End of user code
    }
    
    // Start of user code setterAnnotation:serviceProvider
    // End of user code
    public void setServiceProvider(final Link serviceProvider )
    {
        // Start of user code setterInit:serviceProvider
        // End of user code
        this.serviceProvider = serviceProvider;
    
        // Start of user code setterFinalize:serviceProvider
        // End of user code
    }
    
    
    @Deprecated
    static public String deregisterToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:deregisterToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"deregister\">deregister: </LABEL>";
    
        // Start of user code "Mid:deregisterToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"deregister\" type=\"radio\" value=\"true\">True<input name=\"deregister\" type=\"radio\" value=\"false\">False";
        // Start of user code "Finalize:deregisterToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String trsUriToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:trsUriToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"trsUri\">trsUri: </LABEL>";
    
        // Start of user code "Mid:trsUriToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"trsUri\" type=\"text\" style=\"width: 400px\" id=\"trsUri\" >";
        // Start of user code "Finalize:trsUriToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String trsMqttTopicToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:trsMqttTopicToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"trsMqttTopic\">trsMqttTopic: </LABEL>";
    
        // Start of user code "Mid:trsMqttTopicToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"trsMqttTopic\" type=\"text\" style=\"width: 400px\" id=\"trsMqttTopic\" >";
        // Start of user code "Finalize:trsMqttTopicToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String labelToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:labelToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"label\">label: </LABEL>";
    
        // Start of user code "Mid:labelToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"label\" type=\"text\" style=\"width: 400px\" id=\"label\" >";
        // Start of user code "Finalize:labelToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String serviceProviderToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"serviceProvider\">serviceProvider: </LABEL>";
    
        // Start of user code "Mid:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    @Deprecated
    public String deregisterToHtml()
    {
        String s = "";
    
        // Start of user code deregistertoHtml_mid
        // End of user code
    
        try {
            if (deregister == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + deregister.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code deregistertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String trsUriToHtml()
    {
        String s = "";
    
        // Start of user code trsUritoHtml_mid
        // End of user code
    
        try {
            if (trsUri == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + trsUri.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code trsUritoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String trsMqttTopicToHtml()
    {
        String s = "";
    
        // Start of user code trsMqttTopictoHtml_mid
        // End of user code
    
        try {
            if (trsMqttTopic == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + trsMqttTopic.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code trsMqttTopictoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String labelToHtml()
    {
        String s = "";
    
        // Start of user code labeltoHtml_mid
        // End of user code
    
        try {
            if (label == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + label.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code labeltoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String serviceProviderToHtml()
    {
        String s = "";
    
        // Start of user code serviceProvidertoHtml_mid
        // End of user code
    
        try {
            if ((serviceProvider == null) || (serviceProvider.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + serviceProvider.getValue().toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code serviceProvidertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
