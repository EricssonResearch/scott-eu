// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *     Michael Fiedler      - Bugzilla adapter implementation
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Allow Service Provider Factory class to be specific for each defined ServiceProvider
 *     Anass Radouani       - Allow Service Provider Factory class to be specific for each defined ServiceProvider
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package se.ericsson.cf.scott.sandbox.twin.servlet;

import eu.scott.warehouse.domains.mission.MissionDomainConstants;
import eu.scott.warehouse.domains.twins.TwinsDomainConstants;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.ws.rs.core.UriBuilder;
import org.eclipse.lyo.oslc4j.client.ServiceProviderRegistryURIs;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.PrefixDefinition;
import org.eclipse.lyo.oslc4j.core.model.Publisher;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.ServiceProviderFactory;
import se.ericsson.cf.scott.sandbox.twin.IndependentServiceProviderInfo;
import se.ericsson.cf.scott.sandbox.twin.services.IndependentServiceProviderService1;

// Start of user code imports
// End of user code

public class IndependentServiceProvidersFactory
{
    private static Class<?>[] RESOURCE_CLASSES =
    {
        IndependentServiceProviderService1.class
    };

    private IndependentServiceProvidersFactory()
    {
        super();
    }

    public static ServiceProvider createServiceProvider(final String baseURI, final String title, final String description, final Publisher publisher, final Map<String,Object> parameterValueMap)
           throws OslcCoreApplicationException, URISyntaxException
    {
        final ServiceProvider serviceProvider = ServiceProviderFactory.createServiceProvider(baseURI,
                                                    ServiceProviderRegistryURIs.getUIURI(),
                                                    title,
                                                    description,
                                                    publisher,
                                                    RESOURCE_CLASSES,
                                                    parameterValueMap);
        URI detailsURIs[] = {new URI(baseURI)};
        serviceProvider.setDetails(detailsURIs);

        final PrefixDefinition[] prefixDefinitions =
        {
            new PrefixDefinition(OslcConstants.DCTERMS_NAMESPACE_PREFIX, new URI(OslcConstants.DCTERMS_NAMESPACE)),
            new PrefixDefinition(OslcConstants.OSLC_CORE_NAMESPACE_PREFIX, new URI(OslcConstants.OSLC_CORE_NAMESPACE)),
            new PrefixDefinition(OslcConstants.OSLC_DATA_NAMESPACE_PREFIX, new URI(OslcConstants.OSLC_DATA_NAMESPACE)),
            new PrefixDefinition(OslcConstants.RDF_NAMESPACE_PREFIX, new URI(OslcConstants.RDF_NAMESPACE)),
            new PrefixDefinition(OslcConstants.RDFS_NAMESPACE_PREFIX, new URI(OslcConstants.RDFS_NAMESPACE)),
            new PrefixDefinition(MissionDomainConstants.MISSIONONTOLOGY_NAMSPACE_PREFIX, new URI(MissionDomainConstants.MISSIONONTOLOGY_NAMSPACE))
,
            new PrefixDefinition(TwinsDomainConstants.TWINS_DOMAIN_NAMSPACE_PREFIX, new URI(TwinsDomainConstants.TWINS_DOMAIN_NAMSPACE))
        };

        serviceProvider.setPrefixDefinitions(prefixDefinitions);

        return serviceProvider;
    }

    public static ServiceProvider createIndependentServiceProvider(
        final IndependentServiceProviderInfo serviceProviderInfo)
        throws OslcCoreApplicationException, URISyntaxException, IllegalArgumentException {
        String basePath = OSLC4JUtils.getServletURI();
        String identifier = independentServiceProviderIdentifier(
            serviceProviderInfo.serviceProviderId);
        if (ServiceProviderCatalogSingleton.containsIndependentServiceProvider(
            serviceProviderInfo.serviceProviderId)) {
            throw new IllegalArgumentException(
                String.format("The SP '%s' was already registered", identifier));
        }

        String serviceProviderName = serviceProviderInfo.name;
        String title = String.format("Service Provider '%s'", serviceProviderName);
        String description = String.format("%s (id: %s; kind: %s)",
                                           "Generic SP for SP-independent services", identifier,
                                           "Independent"
        );
        Publisher publisher = null;
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        parameterMap.put("serviceProviderId", serviceProviderInfo.serviceProviderId);
        final ServiceProvider serviceProvider = createServiceProvider(
            basePath, title, description, publisher, parameterMap);

        final URI serviceProviderURI = IndependentServiceProvidersFactory.constructIndependentServiceProviderURI(
            serviceProviderInfo.serviceProviderId);

        serviceProvider.setAbout(serviceProviderURI);
        serviceProvider.setIdentifier(identifier);
        serviceProvider.setCreated(new Date());
        serviceProvider.setDetails(new URI[]{serviceProviderURI});

        return serviceProvider;
    }

    static URI constructIndependentServiceProviderURI(final String serviceProviderId) {
        String basePath = OSLC4JUtils.getServletURI();
        Map<String, Object> pathParameters = new HashMap<String, Object>();
        pathParameters.put("serviceProviderId", serviceProviderId);
        String instanceURI = "independent/{serviceProviderId}";

        final UriBuilder builder = UriBuilder.fromUri(basePath);
        return builder.path(instanceURI).buildFromMap(pathParameters);
    }

    static String independentServiceProviderIdentifier(final String serviceProviderId) {
        String identifier = "/" + serviceProviderId;
        return identifier;
    }
}
