// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *     Michael Fiedler      - adapted for Bugzilla service provider
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - initialize each service provider separately
 *     Anass Radouani       - initialize each service provider separately
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package se.ericsson.cf.scott.sandbox.twin.servlet;

import java.net.URI;
import java.util.Collection;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriBuilder;
import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.model.Service;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.ServiceProviderCatalog;
import se.ericsson.cf.scott.sandbox.twin.IndependentServiceProviderInfo;
import se.ericsson.cf.scott.sandbox.twin.TwinManager;
import se.ericsson.cf.scott.sandbox.twin.TwinRepository;
import se.ericsson.cf.scott.sandbox.twin.TwinRepositoryFakeImpl;
import se.ericsson.cf.scott.sandbox.twin.TwinsServiceProviderInfo;

// Start of user code imports
// End of user code

/**
 * This is the OSLC service provider catalog for the adapter.  Service providers are
 * not registered with the catalog until a request comes in to access either the catalog or a
 * specific service provider.   This request could be from an external consumer or an internal
 * request triggered by a consumer accessing a change request.
 *
 * Information about the desired list of ServiceProviders is retrieved from the Manager.getServiceProviderInfos() method.
 * A ServiceProvider is created and registered for each entry in that list.
 *
 * The registered service providers are refreshed on each catalog or service provider collection
 * request.
 */
public class ServiceProviderCatalogSingleton
{
    private static final ServiceProviderCatalog serviceProviderCatalog;
    private static final Map<String, ServiceProvider> serviceProviders = new TreeMap<>();

    static {
        serviceProviderCatalog = new ServiceProviderCatalog();
        URI catalogUri = UriBuilder.fromUri(OSLC4JUtils.getServletURI()).path("/catalog/singleton").build();
        serviceProviderCatalog.setAbout(catalogUri);
        serviceProviderCatalog.setTitle("Service Provider Catalog");
        serviceProviderCatalog.setDescription("Service Provider Catalog");
    }

    private ServiceProviderCatalogSingleton()
    {
        super();
    }


    public static URI getUri()
    {
        return serviceProviderCatalog.getAbout();
    }

    public static ServiceProviderCatalog getServiceProviderCatalog(HttpServletRequest httpServletRequest)
    {
        initServiceProviders(httpServletRequest);
        return serviceProviderCatalog;
    }

    public static ServiceProvider [] getServiceProviders(HttpServletRequest httpServletRequest)
    {
        synchronized(serviceProviders)
        {
            initServiceProviders(httpServletRequest);
            return serviceProviders.values().toArray(new ServiceProvider[0]);
        }
    }

    public static boolean containsTwinsServiceProvider(final String twinKind, final String twinId) {
        final String id = TwinsServiceProvidersFactory.twinsServiceProviderIdentifier(twinKind, twinId);
        return containsServiceProviderById(id);
    }

    public static boolean containsIndependentServiceProvider(final String serviceProviderId) {
        final String id = IndependentServiceProvidersFactory.independentServiceProviderIdentifier(serviceProviderId);
        return containsServiceProviderById(id);
    }

    public static boolean containsServiceProvider(final ServiceProvider sp) {
        return serviceProviders.containsKey(sp.getIdentifier());
    }

    public static boolean containsServiceProviderById(final String id) {
        return serviceProviders.containsKey(id);
    }

    public static ServiceProvider getTwinsServiceProvider(HttpServletRequest httpServletRequest, final String twinKind, final String twinId)
    {
        ServiceProvider serviceProvider;

        synchronized(serviceProviders)
        {
            String identifier = TwinsServiceProvidersFactory.twinsServiceProviderIdentifier(twinKind, twinId);
            serviceProvider = serviceProviders.get(identifier);

            //One retry refreshing the service providers
            if (serviceProvider == null)
            {
                getServiceProviders(httpServletRequest);
                serviceProvider = serviceProviders.get(identifier);
            }
        }

        if (serviceProvider != null)
        {
            return serviceProvider;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    public static void registerTwinsServiceProvider(final ServiceProvider serviceProvider) {
        synchronized (serviceProviders) {
            registerTwinsServiceProviderNoSync(serviceProvider);
        }
    }

    public static void registerServiceProviderOrSkip(final ServiceProvider serviceProvider) {
        if (!containsServiceProvider(serviceProvider)) {
            synchronized (serviceProviders) {
                if (!containsServiceProvider(serviceProvider)) { // prevent a race cond
                    registerServiceProviderNoSync(serviceProvider);
                }
            }
        }
    }

    private static void registerServiceProviderNoSync(final ServiceProvider serviceProvider) {
        if (containsServiceProvider(serviceProvider)) {
            throw new IllegalArgumentException(String.format("The SP '%s' was already registered", serviceProvider.getIdentifier()));
        }

        final SortedSet<URI> serviceProviderDomains = getServiceProviderDomains(serviceProvider);

        serviceProviderCatalog.addServiceProvider(serviceProvider);
        serviceProviderCatalog.addDomains(serviceProviderDomains);

        serviceProviders.put(serviceProvider.getIdentifier(), serviceProvider);
    }

    /**
     * Register a service provider with the OSLC catalog
     */
    private static void registerTwinsServiceProviderNoSync(final ServiceProvider serviceProvider) {
        registerServiceProviderNoSync(serviceProvider);

    }

    /**
     * Register a service provider with the OSLC catalog
     */
    private static void registerIndependentServiceProviderNoSync(final ServiceProvider serviceProvider) {
        registerServiceProviderNoSync(serviceProvider);
    }



    private static void deregisterServiceProvider(final String serviceProviderIdentifier) {
        synchronized (serviceProviders) {
            final ServiceProvider deregisteredServiceProvider = serviceProviders.remove(
                serviceProviderIdentifier);

            if (deregisteredServiceProvider != null) {
                final SortedSet<URI> remainingDomains = new TreeSet<>();

                for (final ServiceProvider remainingServiceProvider : serviceProviders.values()) {
                    remainingDomains.addAll(getServiceProviderDomains(remainingServiceProvider));
                }

                final SortedSet<URI> removedServiceProviderDomains = getServiceProviderDomains(
                    deregisteredServiceProvider);

                removedServiceProviderDomains.removeAll(remainingDomains);
                serviceProviderCatalog.removeDomains(removedServiceProviderDomains);
                serviceProviderCatalog.removeServiceProvider(deregisteredServiceProvider);
            } else {
                throw new WebApplicationException(Status.NOT_FOUND);
            }
        }
    }

    public static void deregisterTwinServiceProvider(final String twinKind, final String twinId) {
        final String id = TwinsServiceProvidersFactory.twinsServiceProviderIdentifier(
            twinKind, twinId);
        deregisterServiceProvider(id);
    }

    public static void deregisterIndependentServiceProvider(final String serviceProviderId) {
        final String id = IndependentServiceProvidersFactory.independentServiceProviderIdentifier(
            serviceProviderId);
        deregisterServiceProvider(id);
    }


    public static ServiceProvider getIndependentServiceProvider(HttpServletRequest httpServletRequest, final String serviceProviderId)
    {
        ServiceProvider serviceProvider;

        synchronized(serviceProviders)
        {
            String identifier = IndependentServiceProvidersFactory.independentServiceProviderIdentifier(serviceProviderId);
            serviceProvider = serviceProviders.get(identifier);

            //One retry refreshing the service providers
            if (serviceProvider == null)
            {
                getServiceProviders(httpServletRequest);
                serviceProvider = serviceProviders.get(identifier);
            }
        }

        if (serviceProvider != null)
        {
            return serviceProvider;
        }

        throw new WebApplicationException(Status.NOT_FOUND);
    }

    public static void registerIndependentServiceProvider(final ServiceProvider serviceProvider) {
        synchronized (serviceProviders) {
            registerIndependentServiceProviderNoSync(serviceProvider);
        }
    }


    // TODO Andrew@2019-01-23: move to the Core
    // TODO Andrew@2019-01-23: use unsorted Set
    private static SortedSet<URI> getServiceProviderDomains(final ServiceProvider serviceProvider)
    {
        final SortedSet<URI> domains = new TreeSet<>();

        if (serviceProvider!=null) {
            final Service [] services = serviceProvider.getServices();
            for (final Service service : services)
            {
                final URI domain = service.getDomain();

                domains.add(domain);
            }
        }
        return domains;
    }

    /**
    * Retrieve the set of initial ServiceProviders as returned from the Manager.getServiceProviderInfos() method, and construct a service provider for each.
    *
    * Each ServiceProvider ID is added to the parameter map which will be used during service provider
    * creation to create unique URI paths for each ServiceProvider. 
    *
    */
    protected static void initServiceProviders (HttpServletRequest httpServletRequest)
    {
//        throw new UnsupportedOperationException("This is method is being removed");

        try {
            // Start of user code initServiceProviders
            final TwinRepository twinRepository = getTwinRepository();
            final Collection<ServiceProvider> serviceProviders = twinRepository.getServiceProviders();
            serviceProviders.forEach(sp -> registerServiceProviderOrSkip(sp));
            // End of user code


            TwinsServiceProviderInfo [] twinsServiceProviderInfos = TwinManager.getTwinsServiceProviderInfos(httpServletRequest);
            //Register each service provider
            for (TwinsServiceProviderInfo serviceProviderInfo : twinsServiceProviderInfos) {
                if (!containsTwinsServiceProvider(serviceProviderInfo.twinKind, serviceProviderInfo.twinId)) {
                    ServiceProvider aServiceProvider = TwinsServiceProvidersFactory.createTwinsServiceProvider(serviceProviderInfo);
                    registerTwinsServiceProvider(aServiceProvider);
                }
            }
            IndependentServiceProviderInfo [] independentServiceProviderInfos = TwinManager.getIndependentServiceProviderInfos(httpServletRequest);
            //Register each service provider
            for (IndependentServiceProviderInfo serviceProviderInfo : independentServiceProviderInfos) {
                if (!containsIndependentServiceProvider(serviceProviderInfo.serviceProviderId)) {
                    ServiceProvider aServiceProvider = IndependentServiceProvidersFactory.createIndependentServiceProvider(serviceProviderInfo);
                    registerIndependentServiceProvider(aServiceProvider);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new WebApplicationException(e,Status.INTERNAL_SERVER_ERROR);
        }
    }

    // TODO Andrew@2019-01-23: move to some other singleton, ideally use DI
    private static TwinRepository getTwinRepository() {
        return new TwinRepositoryFakeImpl();
    }
}

