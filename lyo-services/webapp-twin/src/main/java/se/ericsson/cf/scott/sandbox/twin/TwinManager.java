// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package se.ericsson.cf.scott.sandbox.twin;

import eu.scott.warehouse.domains.twins.DeviceRegistrationMessage;
import eu.scott.warehouse.domains.twins.PlanExecutionRequest;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.servlet.ServletContextEvent;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang.WordUtils;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import se.ericsson.cf.scott.sandbox.twin.trs.TwinChangeHistories;

// Start of user code imports
//import se.ericsson.cf.scott.sandbox.twin.ros.RobotClientNode;
// End of user code

// Start of user code pre_class_code
// End of user code

public class TwinManager {

    // Start of user code class_attributes
    public final static String PACKAGE_ROOT = TwinManager.class.getPackage().getName();
    private final static Logger log = LoggerFactory.getLogger(TwinManager.class);
    private static Random r;
    // End of user code

    // End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
        
        // Start of user code contextInitializeServletListener

        log.info("Twin {} is starting", TwinAdaptorHelper.getTwinUUID());
        TwinAdaptorHelper.servletContext = servletContextEvent.getServletContext();
        r = new Random();

//        initStore();

//        initRos();

        TwinAdaptorHelper.initTrsClient();

        TwinAdaptorHelper.changeHistories = new TwinChangeHistories(
            TwinAdaptorHelper.mqttGateway.getMqttClient(), "trs-twin",
            TimeUnit.SECONDS.toMillis(5)
        );

//        registerTwins();

        // End of user code
    }

    public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
    {
        
        // Start of user code contextDestroyed

        log.info("Destroying the servlet");
        try {
            TwinAdaptorHelper.getTrsClientManager().unregisterTwinAndDisconnect();
            TwinAdaptorHelper.mqttGateway.disconnect();
        } catch (MqttException e) {
            log.error("Failed to disconnect from the MQTT broker");
        }

        // End of user code
    }

/*    public static TwinsServiceProviderInfo[] getTwinsServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        TwinsServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "TwinsServiceProviderInfo[] getTwinsServiceProviderInfos(...)"
        // End of user code
        return serviceProviderInfos;
    }

    public static IndependentServiceProviderInfo[] getIndependentServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
        IndependentServiceProviderInfo[] serviceProviderInfos = {};
        
        // Start of user code "IndependentServiceProviderInfo[] getIndependentServiceProviderInfos(...)"
        // TODO Implement code to return the set of ServiceProviders
        // End of user code
        return serviceProviderInfos;
    }*/

    public static PlanExecutionRequest createPlanExecutionRequest(HttpServletRequest httpServletRequest, final PlanExecutionRequest aResource, final String twinKind, final String twinId)
    {
        PlanExecutionRequest newResource = null;
        
        // Start of user code createPlanExecutionRequest
        // TODO Implement code to create a resource
        // End of user code
        return newResource;
    }



    public static DeviceRegistrationMessage createDeviceRegistrationMessage(HttpServletRequest httpServletRequest, final DeviceRegistrationMessage aResource)
    {
        DeviceRegistrationMessage newResource = null;
        
        // Start of user code createDeviceRegistrationMessage
        log.info("Registering a twin: {}", aResource.toString());
        final TwinsServiceProviderInfo spInfo = new TwinsServiceProviderInfo();
        spInfo.twinKind = aResource.getTwinType();
        spInfo.twinId = aResource.getTwinId();
        if (spInfo.twinId == null) {
            spInfo.twinId = String.valueOf(r.nextInt(10000));
        }
        spInfo.name = String.format(
            "%s Twin '%s'", WordUtils.capitalize(spInfo.twinKind), spInfo.twinId);
        final ServiceProvider serviceProvider = TwinAdaptorHelper.getTwins().registerTwinSP(spInfo);
        if (serviceProvider == null) {
            throw new IllegalStateException();
        }

        newResource = aResource;
        newResource.setTwinId(spInfo.twinId);

        // End of user code
        return newResource;
    }




    public static String getETagFromDeviceRegistrationMessage(final DeviceRegistrationMessage aResource)
    {
        String eTag = null;
        // Start of user code getETagFromDeviceRegistrationMessage
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }
    public static String getETagFromPlanExecutionRequest(final PlanExecutionRequest aResource)
    {
        String eTag = null;
        // Start of user code getETagFromPlanExecutionRequest
        // TODO Implement code to return an ETag for a particular resource
        // End of user code
        return eTag;
    }

}
