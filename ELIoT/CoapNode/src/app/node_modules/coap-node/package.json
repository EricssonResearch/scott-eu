{
  "_args": [
    [
      {
        "raw": "coap-node@https://github.com/Alliasd/coap-node/tarball/master",
        "scope": null,
        "escapedName": "coap-node",
        "name": "coap-node",
        "rawSpec": "https://github.com/Alliasd/coap-node/tarball/master",
        "spec": "https://github.com/Alliasd/coap-node/tarball/master",
        "type": "remote"
      },
      "/Users/eyifjin/RotCommu/ELIoT/src/app"
    ]
  ],
  "_from": "https://github.com/Alliasd/coap-node/tarball/master",
  "_id": "coap-node@0.2.2",
  "_inCache": true,
  "_location": "/coap-node",
  "_phantomChildren": {
    "asap": "2.0.6"
  },
  "_requested": {
    "raw": "coap-node@https://github.com/Alliasd/coap-node/tarball/master",
    "scope": null,
    "escapedName": "coap-node",
    "name": "coap-node",
    "rawSpec": "https://github.com/Alliasd/coap-node/tarball/master",
    "spec": "https://github.com/Alliasd/coap-node/tarball/master",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://github.com/Alliasd/coap-node/tarball/master",
  "_shasum": "59e270e5391200e253efa6b81a64f1c97c197551",
  "_shrinkwrap": null,
  "_spec": "coap-node@https://github.com/Alliasd/coap-node/tarball/master",
  "_where": "/Users/eyifjin/RotCommu/ELIoT/src/app",
  "author": "",
  "bugs": {
    "url": "https://github.com/PeterEB/coap-node/issues"
  },
  "dependencies": {
    "busyman": "^0.3.0",
    "coap": "^0.17.0",
    "debug": "^2.2.0",
    "lwm2m-codec": "^0.0.8",
    "lwm2m-id": "^1.6.1",
    "network": "^0.2.1",
    "promise": "^8.0.1",
    "smartobject": "^1.4.3"
  },
  "description": "Client node of lightweight M2M (LWM2M).",
  "devDependencies": {
    "chai": "^3.5.0",
    "coap-shepherd": "^0.2.2",
    "mocha": "^2.5.3"
  },
  "homepage": "https://github.com/PeterEB/coap-node",
  "keywords": [
    "coap"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "coap-node",
  "optionalDependencies": {},
  "readme": "# coap-node\nClient node of lightweight M2M (LWM2M).\n\n[![NPM](https://nodei.co/npm/coap-node.png?downloads=true)](https://nodei.co/npm/coap-node/)  \n\n[![Build Status](https://travis-ci.org/PeterEB/coap-node.svg?branch=develop)](https://travis-ci.org/PeterEB/coap-node)\n[![npm](https://img.shields.io/npm/v/coap-node.svg?maxAge=2592000)](https://www.npmjs.com/package/coap-node)\n[![npm](https://img.shields.io/npm/l/coap-node.svg?maxAge=2592000)](https://www.npmjs.com/package/coap-node)\n\n<br />\n\n## Documentation  \n\nPlease visit the [Wiki](https://github.com/PeterEB/coap-node/wiki).\n\n<br />\n\n## Overview\n\n[**OMA Lightweight M2M**](http://technical.openmobilealliance.org/Technical/technical-information/release-program/current-releases/oma-lightweightm2m-v1-0) (LWM2M) is a resource constrained device management protocol relies on [**CoAP**](https://tools.ietf.org/html/rfc7252). And **CoAP** is an application layer protocol that allows devices to communicate with each other RESTfully over the Internet.  \n\n**coap-shepherd** and **coap-node** modules aim to provide a simple way to build and manage a **LWM2M** machine network. \n* Server-side library: [**coap-shepherd**](https://github.com/PeterEB/coap-shepherd)\n* Client-side library: **coap-node** (this module)\n* [**A simple demo webapp**](https://github.com/PeterEB/quick-demo)\n\n![coap-shepherd net](https://raw.githubusercontent.com/PeterEB/documents/master/coap-shepherd/media/lwm2m_net.png)  \n\n### LWM2M Client: coap-node\n\n* It is an implementation of LWM2M Client managed by a **coap-shepherd** Server.\n* It follows most parts of **LWM2M** specification to meet the requirements of a machine network and devices management.\n* It uses [smartobject](https://github.com/PeterEB/smartobject) as its fundamental of resource organizing on devices. **smartobject** can help you create smart objects with IPSO data model, and it also provides a scheme to help you abstract your hardware into smart objects. You may like to use **smartobject** to create many plugins for your own hardware or modules, i.e., temperature sensor, humidity sensor, light control. Here is a [tutorual of how to plan resources](https://github.com/PeterEB/smartobject/blob/master/docs/resource_plan.md) with smartobject.\n\n<br />\n\n## Installation\n\n> $ npm install coap-node --save\n\n<br />\n\n## Usage\n\nClient-side example (the following example is how you use `coap-node` on a machine node):\n\n* Step 1: Resources initialzation.\n```js\nvar SmartObject = require('smartobject');\n\n// initialize Resources that follow IPSO definition\nvar so = new SmartObject();\n\n// initialize your Resources\n// oid = 'temperature', iid = 0\nso.init('temperature', 0, {\n    sensorValue: 21,\n    units: 'C'\n});\n\n// oid = 'lightCtrl', iid = 0\nso.init('lightCtrl', 0, {\n    onOff: false\n});\n```\n\n* Step 2: Client device initialzation.\n```js\nvar CoapNode = require('coap-node');\n\n// Instantiate a machine node with a client name and your smart object\nvar cnode = new CoapNode('my_first_node', so);\n\ncnode.on('registered', function () {\n    // If the registration procedure completes successfully, 'registered' will be fired\n\n    // after registered, start your application\n});\n\n// register to a Server with its ip and port\ncnode.register('192.168.0.77', 5683, function (err, rsp) {\n    console.log(rsp);      // { status: '2.05' }\n});\n```\n\nServer-side example (please go to [coap-shepherd](https://github.com/PeterEB/coap-shepherd) document for details):\n\n```js\nvar cnode = cserver.find('my_first_node');\n\ncnode.read('/temperature/0/sensorValue', function (err, rsp) {\n    console.log(rsp);      // { status: '2.05', data: 21 }\n});\n\ncnode.write('/lightCtrl/0/onOff', true, function (err, rsp) {\n    console.log(rsp);      // { status: '2.04' }\n});\n```\n\n<br />\n\n## License\n\nLicensed under [MIT](https://github.com/PeterEB/coap-node/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PeterEB/coap-node.git"
  },
  "scripts": {
    "test": "make test-all"
  },
  "version": "0.2.2"
}
