version: '3.3'

services:
  caddy:
    image: lucaslorentz/caddy-docker-proxy:alpine
    networks:
      - overlay
    ports:
      - 8080:8080
    command: -port 8080 -log stdout
    # TODO why
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 1
      restart_policy:
        condition: none
  planner:
    image: scott/planner-reasoner
    environment:
      - PORT=3020 # internal port
    networks:
      overlay:
        aliases:
            - planner.svc
#    ports:
#      - "3021:3020" # external:internal
    stdin_open: true
    deploy:
      labels:
        caddy.address: planner.svc
        caddy.targetport: 3020
        caddy.tls: "off"
      replicas: 1
      restart_policy:
        # debug only
        condition: none
      resources:
        limits:
          memory: 384m
  whc:
    image: scott/webapp-whc
    environment:
      JAVA_OPTIONS: "-Xdebug -agentlib:jdwp=transport=dt_socket,address=9999,server=y,suspend=n"
      LYO_BASE: "http://whc.svc:8080/"
    networks:
      overlay:
        aliases:
            - whc.svc
    ports:
      - "9980:9999"
    deploy:
      labels:
        caddy.address: whc.svc
        caddy.targetport: 8080
        caddy.tls: "off"
      replicas: 1
      restart_policy:
        # debug only
        condition: none
      resources:
        limits:
          memory: 512m
  twins:
    image: scott/webapp-twin-robot
    environment:
      JAVA_OPTIONS: "-Xdebug -agentlib:jdwp=transport=dt_socket,address=9999,server=y,suspend=n"
      LYO_BASE: "http://twins.svc:8080/"
      CONTAINER_SLOT: "{{.Task.Slot}}"
    networks:
      overlay:
        aliases:
          - twins.svc
    depends_on:
      - whc
      - planner
      - redis
      - mqtt
    ports:
      - "9981:9999"
    deploy:
      labels:
        caddy.address: twins.svc
        caddy.targetport: 8080
        caddy.tls: "off"
      replicas: 1
      resources:
        limits:
          memory: 384m
      restart_policy:
        condition: none
  svc-location:
    image: scott/webapp-svc-location
    environment:
      JAVA_OPTIONS: "-Xdebug -agentlib:jdwp=transport=dt_socket,address=9999,server=y,suspend=n"
      LYO_BASE: "http://location.svc:8080/"
    networks:
      overlay:
        aliases:
          - "location.svc"
    ports:
      - "9982:9999"
    depends_on:
      - redis
      - mqtt
    deploy:
      labels:
        caddy.address: location.svc
        caddy.targetport: 8080
        caddy.tls: "off"
      replicas: 1
      resources:
        limits:
          memory: 384m
      restart_policy:
        condition: none
  fuseki:
    image: scott/jena-fuseki
    networks:
      overlay:
        aliases:
            - fuseki.svc
    deploy:
      labels:
        caddy.address: fuseki.svc
        caddy.targetport: 3030
        caddy.tls: "off"
      replicas: 1
      restart_policy:
        condition: none
      resources:
        limits:
          memory: 384m
  mosquitto:
    image: scott/eclipse-mosquitto
    networks:
      overlay:
        aliases:
            - mqtt.svc
    ports:
      - "1883:1883"
      - "9001:9001"
    deploy:
      replicas: 1
      restart_policy:
        condition: none
      resources:
        limits:
          memory: 128m
  redis:
    image: redis:5-alpine
    networks:
      overlay:
        aliases:
            - redis.svc
    deploy:
      replicas: 1
      restart_policy:
        condition: none
      resources:
        limits:
          memory: 128m

#   # Kafka
#   zookeeper:
#     image: wurstmeister/zookeeper
#     ports:
#       - "2181:2181"
#     networks:
#      - overlay
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: any
#       resources:
#         limits:
#           memory: 512m
#   kafka:
#     image: wurstmeister/kafka:latest
#     ports:
#       - target: 9094
#         published: 9094
#         protocol: tcp
#         mode: host
#     networks:
#       - overlay
#     environment:
# #      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
#       KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
# #      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
#       KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://kafka:9094
#       KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
#       KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
#       KAFKA_CREATE_TOPICS: test:4:1
#     deploy:
#       replicas: 1
#       restart_policy:
#         condition: any
#       resources:
#         limits:
#           memory: 1024m
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock

#   # Flink
#   job-cluster:
#     image: scott/flink-trs-twin
#     ports:
#       - "8881:8081"
#     command: job-cluster --job-classname se.ericsson.cf.scott.sandbox.flink.StreamingJob -Djobmanager.rpc.address=job-cluster -Dparallelism.default=4
#     networks:
#       - overlay
#     depends_on:
#       - kafka
#     deploy:
#       replicas: 1
#       resources:
#         limits:
#           memory: 768m
#       restart_policy:
#         condition: any

#   taskmanager:
#     image: scott/flink-trs-twin
#     command: task-manager -Djobmanager.rpc.address=job-cluster
#     networks:
#       - overlay
#     depends_on:
#       - job-cluster
#     deploy:
#       replicas: 4
#       resources:
#         limits:
#           memory: 512m
#       restart_policy:
#         condition: any
  # sandbox-executor:
  #   image: scott/webapp-executor
  #   # environment:
  #     # JAVA_OPTIONS: "-Xdebug -agentlib:jdwp=transport=dt_socket,address=9999,server=y,suspend=n"
  #   networks:
  #     - overlay
  #   ports:
  #     - "8083:8080"
  #     # - "9999:9999"
  #   # depends_on:
  #     # - sandbox-whc
  #   deploy:
  #     replicas: 1
  #     resources:
  #       limits:
  #         memory: 384m
  #     restart_policy:
  #       condition: on-failure
networks:
  overlay:
